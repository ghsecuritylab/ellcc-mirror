# -*- Python -*-

import os
import platform
import re
import subprocess
import tempfile

import lit.formats
import lit.util

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'regression'
ellcc = os.getenv('ELLCC')

# Tweak PATH for Win32
if platform.system() == 'Windows':
    # Seek sane tools in directories and set to $PATH.
    path = getattr(config, 'lit_tools_dir', None)
    path = lit_config.getToolsPath(path,
                                   config.environment['PATH'],
                                   ['cmp.exe', 'grep.exe', 'sed.exe'])
    if path is not None:
        path = os.path.pathsep.join((path,
                                     config.environment['PATH']))
        config.environment['PATH'] = path

# Choose between lit's internal shell pipeline runner and a real shell.  If
# LIT_USE_INTERNAL_SHELL is in the environment, we use that as an override.
use_lit_shell = os.environ.get("LIT_USE_INTERNAL_SHELL")
if use_lit_shell:
    # 0 is external, "" is default, and everything else is internal.
    execute_external = (use_lit_shell == "0")
else:
    # Otherwise we default to internal on Windows and external elsewhere, as
    # bash on Windows is usually very slow.
    execute_external = (not sys.platform in ['win32'])

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
config.test_format = lit.formats.ShTest(execute_external)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp', '.m', '.mm', '.cu', '.ll', '.cl', '.s']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# Set llvm_{src,obj}_root for use by others.
config.llvm_src_root = getattr(config, 'llvm_src_root', None)
config.llvm_obj_root = getattr(config, 'llvm_obj_root', None)

# Clear some environment variables that might affect ecc.
#
# This first set of vars are read by ecc, but shouldn't affect tests
# that aren't specifically looking for these features, or are required
# simply to run the tests at all.
#
# FIXME: Should we have a tool that enforces this?

# safe_env_vars = ('TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',
#                  'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',
#                  'IOS_SIMULATOR_DEPLOYMENT_TARGET',
#                  'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',
#                  'VC80COMNTOOLS')
possibly_dangerous_env_vars = ['COMPILER_PATH', 'RC_DEBUG_OPTIONS',
                               'CINDEXTEST_PREAMBLE_FILE', 'LIBRARY_PATH',
                               'CPATH', 'C_INCLUDE_PATH', 'CPLUS_INCLUDE_PATH',
                               'OBJC_INCLUDE_PATH', 'OBJCPLUS_INCLUDE_PATH',
                               'LIBCLANG_TIMING', 'LIBCLANG_OBJTRACKING',
                               'LIBCLANG_LOGGING', 'LIBCLANG_BGPRIO_INDEX',
                               'LIBCLANG_BGPRIO_EDIT', 'LIBCLANG_NOTHREADS',
                               'LIBCLANG_RESOURCE_USAGE',
                               'LIBCLANG_CODE_COMPLETION_LOGGING']
# ecc/Win32 may refer to %INCLUDE%. vsvarsall.bat sets it.
if platform.system() != 'Windows':
    possibly_dangerous_env_vars.append('INCLUDE')
for name in possibly_dangerous_env_vars:
  if name in config.environment:
    del config.environment[name]

# Propagate path to symbolizer for ASan/MSan.
for symbolizer in ['ASAN_SYMBOLIZER_PATH', 'MSAN_SYMBOLIZER_PATH']:
    if symbolizer in os.environ:
        config.environment[symbolizer] = os.environ[symbolizer]

###

# Discover the 'ecc' and 'eccgcc' to use.

import os

def inferecc(PATH):
    # Determine which ecc to use.
    ecc = os.getenv('ECC')

    # If the user set ecc in the environment, definitely use that and don't
    # try to validate.
    if ecc:
        return ecc

    if ellcc:
        return os.path.join(ellcc, "bin", "ecc")

    # Otherwise look in the path.
    ecc = lit.util.which('ecc', PATH)

    if not ecc:
        lit_config.fatal("couldn't find 'ecc' program, try setting "
                         "ECC in your environment")

    return ecc

config.ecc = inferecc(config.environment['PATH']).replace('\\', '/')
if not lit_config.quiet:
    lit_config.note('using ecc: %r' % config.ecc)

# Note that when substituting %ecc_cc1 also fill in the include directory of
# the builtin headers. Those are part of even a freestanding environment, but
# ecc relies on the driver to locate them.
def geteccBuiltinIncludeDir(ecc):
    # FIXME: Rather than just getting the version, we should have ecc print
    # out its resource dir here in an easy to scrape form.
    cmd = subprocess.Popen([ecc, '-print-file-name=include'],
                           stdout=subprocess.PIPE)
    if not cmd.stdout:
      lit_config.fatal("Couldn't find the include dir for ecc ('%s')" % ecc)
    dir = cmd.stdout.read().strip()
    if sys.platform in ['win32'] and execute_external:
        # Don't pass dosish path separator to msys bash.exe.
        dir = dir.replace('\\', '/')
    # Ensure the result is an ascii string, across Python2.5+ - Python3.
    return str(dir.decode('ascii'))

config.substitutions.append( ('%ecc_cc1', '%s -cc1 -internal-isystem %s'
                              % (config.ecc,
                                 geteccBuiltinIncludeDir(config.ecc))) )
config.substitutions.append( ('%ecc_cpp', ' ' + config.ecc +
                              ' --driver-mode=cpp '))
config.substitutions.append( ('%ecc_cl', ' ' + config.ecc +
                              ' --driver-mode=cl '))
config.substitutions.append( ('%eccgxx', ' ' + config.ecc +
                              ' --driver-mode=g++ '))
config.substitutions.append( ('%ecc', ' ' + config.ecc + ' ') )
config.substitutions.append( ('%armecc', ' ' + config.ecc + ' ' +
                             '-target arm-ellcc-linux-eabi5 -march=armv7 -mfpu=vfp -mfloat-abi=softfp  ') )
config.substitutions.append( ('%armexx', ' ' + config.ecc + '++ ' +
                             '-target arm-ellcc-linux-eabi5 -march=armv7 -mfpu=vfp -mfloat-abi=softfp  ') )
config.substitutions.append( ('%armrun', ' ' + ellcc + '/bin/qemu-arm ') )
config.substitutions.append( ('%armebecc', ' ' + config.ecc + ' ' +
                             '-target armeb-ellcc-linux-eabi5 -march=armv7 -mfpu=vfp -mfloat-abi=softfp ') )
config.substitutions.append( ('%armebexx', ' ' + config.ecc + '++ ' +
                             '-target armeb-ellcc-linux-eabi5 -march=armv7 -mfpu=vfp -mfloat-abi=softfp ') )
config.substitutions.append( ('%armebrun', ' ' + ellcc + '/bin/qemu-armeb ') )
config.substitutions.append( ('%i386ecc', ' ' + config.ecc + ' ' +
                             ' -target i386-ellcc-linux ') )
config.substitutions.append( ('%i386exx', ' ' + config.ecc + '++ ' +
                             '-target i386-ellcc-linux ') )
config.substitutions.append( ('%i386run', ' ' + ellcc + '/bin/qemu-i386 ') )
config.substitutions.append( ('%microblazeecc', ' ' + config.ecc + ' ' +
                            '-target microblaze-ellcc-linux ') )
config.substitutions.append( ('%microblazeexx', ' ' + config.ecc + '++ ' +
                            '-target microblaze-ellcc-linux ') )
config.substitutions.append( ('%microblazerun', ' ' + ellcc + '/bin/qemu-microblaze ') )
config.substitutions.append( ('%mipsecc', ' ' + config.ecc + ' ' +
                              '-target mips-ellcc-linux -mcpu=mips32r2') )
config.substitutions.append( ('%mipsexx', ' ' + config.ecc + '++ ' +
                              '-target mips-ellcc-linux -mcpu=mips32r2') )
config.substitutions.append( ('%mipsrun', ' ' + ellcc + '/bin/qemu-mips ') )
config.substitutions.append( ('%mipselecc', ' ' + config.ecc + ' ' +
                             '-target mipsel-ellcc-linux -mcpu=mips32r2') )
config.substitutions.append( ('%mipselexx', ' ' + config.ecc + '++ ' +
                             '-target mipsel-ellcc-linux -mcpu=mips32r2') )
config.substitutions.append( ('%mipselrun', ' ' + ellcc + '/bin/qemu-mipsel ') )
config.substitutions.append( ('%ppcecc', ' ' + config.ecc + ' ' +
                             '-target ppc-ellcc-linux ') )
config.substitutions.append( ('%ppcexx', ' ' + config.ecc + '++ ' +
                             '-target ppc-ellcc-linux ') )
config.substitutions.append( ('%ppcrun', ' ' + ellcc + '/bin/qemu-ppc ') )
config.substitutions.append( ('%ppc64ecc', ' ' + config.ecc + ' ' +
                             '-target ppc64-ellcc-linux ') )
config.substitutions.append( ('%ppc64exx', ' ' + config.ecc + '++ ' +
                             '-target ppc64-ellcc-linux ') )
config.substitutions.append( ('%ppc64run', ' ' + ellcc + '/bin/qemu-ppc64 ') )
config.substitutions.append( ('%x86_64ecc', ' ' + config.ecc + ' ' +
                              '-target x86_64-ellcc-linux ') )
config.substitutions.append( ('%x86_64exx', ' ' + config.ecc + '++ ' +
                              '-target x86_64-ellcc-linux ') )
config.substitutions.append( ('%x86_64run', ' ' + ellcc + '/bin/qemu-x86_64 ') )
config.substitutions.append( ('%test_debuginfo', ' ' + config.llvm_src_root + '/utils/test_debuginfo.pl ') )

# FIXME: Find nicer way to prohibit this.
config.substitutions.append(
    (' ecc ', """*** Do not use 'ecc' in tests, use '%ecc'. ***""") )
config.substitutions.append(
    (' ecc\+\+ ', """*** Do not use 'ecc++' in tests, use '%eccxx'. ***"""))
config.substitutions.append(
    (' ecc-cc ',
     """*** Do not use 'ecc-cc' in tests, use '%ecc_cc1'. ***""") )
config.substitutions.append(
    (' ecc -cc1 ',
     """*** Do not use 'ecc -cc1' in tests, use '%ecc_cc1'. ***""") )
config.substitutions.append(
    (' %ecc-cc1 ',
     """*** invalid substitution, use '%ecc_cc1'. ***""") )
config.substitutions.append(
    (' %ecc-cpp ',
     """*** invalid substitution, use '%ecc_cpp'. ***""") )
config.substitutions.append(
    (' %ecc-cl ',
     """*** invalid substitution, use '%ecc_cl'. ***""") )

###

# Set available features we allow tests to conditionalize on.
#
# As of 2011.08, crash-recovery tests still do not pass on FreeBSD.
if platform.system() not in ['FreeBSD']:
    config.available_features.add('crash-recovery')

# Shell execution
if execute_external:
    config.available_features.add('shell')

# Exclude MSYS due to transforming '/' to 'X:/mingwroot/'.
if not platform.system() in ['Windows'] or not execute_external:
    config.available_features.add('shell-preserves-root')

# ANSI escape sequences in non-dumb terminal
if platform.system() not in ['Windows']:
    config.available_features.add('ansi-escape-sequences')

# Native compilation: host arch == target arch
#if config.host_arch in config.target_triple:
    #config.available_features.add("native")

# Case-insensitive file system
def is_filesystem_case_insensitive():
    handle, path = tempfile.mkstemp(prefix='case-test', dir=config.test_exec_root)
    isInsensitive = os.path.exists(
        os.path.join(
            os.path.dirname(path),
            os.path.basename(path).upper()
            ))
    os.close(handle)
    os.remove(path)
    return isInsensitive

if is_filesystem_case_insensitive():
    config.available_features.add('case-insensitive-filesystem')

# Tests that require the /dev/fd filesystem.
if os.path.exists("/dev/fd/0") and sys.platform not in ['cygwin']:
    config.available_features.add('dev-fd-fs')

# [PR8833] LLP64-incompatible tests
if not re.match(r'^x86_64.*-(win32|mingw32)$', config.target_triple):
    config.available_features.add('LP64')

# [PR12920] "clang-driver" -- set if gcc driver is not used.
if not re.match(r'.*-(cygwin|mingw32)$', config.target_triple):
    config.available_features.add('ecc-driver')

# Registered Targets
def get_llc_props(tool):
    set_of_targets = set()
    enable_assertions = False

    cmd = subprocess.Popen([tool, '-version'], stdout=subprocess.PIPE)

    # Parse the stdout to get the list of registered targets.
    parse_targets = False
    for line in cmd.stdout:
        line = line.decode('ascii')
        if parse_targets:
            m = re.match( r'(.*) - ', line)
            if m is not None:
                set_of_targets.add(m.group(1).strip() + '-registered-target')
            else:
                break
        elif "Registered Targets:" in line:
            parse_targets = True

        if re.search(r'with assertions', line):
            enable_assertions = True

    return {"set_of_targets":    set_of_targets,
            "enable_assertions": enable_assertions}

llc_props = get_llc_props(os.path.join(ellcc, "bin", "llc"))
if len(llc_props['set_of_targets']) > 0:
    config.available_features.update(llc_props['set_of_targets'])
else:
    lit_config.fatal('No Targets Registered with the LLVM Tools!')

if llc_props['enable_assertions']:
    config.available_features.add('asserts')

if lit.util.which('xmllint'):
    config.available_features.add('xmllint')

# Sanitizers.
if config.llvm_use_sanitizer == "Address":
    config.available_features.add("asan")
if (config.llvm_use_sanitizer == "Memory" or
        config.llvm_use_sanitizer == "MemoryWithOrigins"):
    config.available_features.add("msan")

# Check if we should run long running tests.
if lit_config.params.get("run_long_tests", None) == "true":
    config.available_features.add("long_tests")

# Check if we should use gmalloc.
use_gmalloc_str = lit_config.params.get('use_gmalloc', None)
if use_gmalloc_str is not None:
    if use_gmalloc_str.lower() in ('1', 'true'):
        use_gmalloc = True
    elif use_gmalloc_str.lower() in ('', '0', 'false'):
        use_gmalloc = False
    else:
        lit_config.fatal('user parameter use_gmalloc should be 0 or 1')
else:
    # Default to not using gmalloc
    use_gmalloc = False

# Allow use of an explicit path for gmalloc library.
# Will default to '/usr/lib/libgmalloc.dylib' if not set.
gmalloc_path_str = lit_config.params.get('gmalloc_path',
                                         '/usr/lib/libgmalloc.dylib')

if use_gmalloc:
     config.environment.update({'DYLD_INSERT_LIBRARIES' : gmalloc_path_str})
