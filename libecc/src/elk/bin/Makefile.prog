# Build rules for a program.
ELLCC=../../../../..
PROG = $(shell basename `pwd`)
TUPLE = $(shell cd ../..; basename `pwd`)
LTUPLE = $(shell echo $(TUPLE) | sed -e "s/-elk-/-linux-/")
ARCH = $(shell $(ELLCC)/bin/ecc-getincarch $(TUPLE))
LIB = $(patsubst %-build,%,$(shell basename `cd ../../..; pwd`))
LIBNAME = lib$(LIB).a
PROGNAME = $(PROG)_bin.o
CC = $(ELLCC)/bin/ecc
CXX = $(ELLCC)/bin/ecc++
AR = $(ELLCC)/bin/ecc-ar
LD = $(ELLCC)/bin/ecc
OBJCOPY = $(ELLCC)/bin/ecc-objcopy
CFLAGS += -g -MD -MP
CXXFLAGS += -g -MD -MP
ifeq ($(VERBOSE),)
  OUT=@
  OUTC=@echo "Compiling $<";
  OUTA=@echo "Assembling $<";
  OUTLD=@echo "Making program $(PROGNAME)";
else
  OUT=
  OUTC=
  OUTA=
  OUTLD=
endif

.SUFFIXES: .c .cpp .cxx .S .o
.c.o:
	$(OUTC)$(CC) -target $(TUPLE) -c $(CFLAGS) $<
.cpp.o:
	$(OUTC)$(CXX) -target $(TUPLE) -c $(CXXFLAGS) $<
.cxx.o:
	$(OUTC)$(CXX) -target $(TUPLE) -c $(CXXFLAGS) $<
.S.o:
	$(OUTA)$(CC) -target $(TUPLE) -c $(CFLAGS) $<
.s.o:
	$(OUTA)$(CC) -target $(TUPLE) -c $(CFLAGS) $<


# Build the program.

SRCS = $(wildcard *.c *.cxx *.cpp *.s *.S)
BASENAMES := $(basename $(filter %.c %.cxx %.cpp %.S, $(SRCS)))
BASENAMES := $(patsubst __stub%,,$(BASENAMES))
OBJS := $(BASENAMES:%=%.o)

CRTBASENAMES := $(basename $(filter %.c %.S, $(CRTSRCS)))
CRTOBJS := $(CRTBASENAMES:%=%.o)

DEPENDSRCS := $(basename $(filter %.c %.cxx %.cpp %.S, $(SRCS) $(CRTSRCS)))
DEPENDFILES := $(DEPENDSRCS:%=%.d)

all: strip

$(PROGNAME): strip


define STUBBEGIN=
$(OUT)echo "#if defined(__ppc__)" >__stubbegin.S
$(OUT)echo ".section .bss" >>__stubbegin.S
$(OUT)echo "#else" >>__stubbegin.S
$(OUT)echo ".bss" >>__stubbegin.S
$(OUT)echo "#endif" >>__stubbegin.S
$(OUT)echo ".global __bss_start" >>__stubbegin.S
$(OUT)echo "__bss_start:" >>__stubbegin.S
endef

define STUBEND=
$(OUT)echo "#include <inttypes.h>" >__stubend.c
$(OUT)echo "#include <pthread.h>" >>__stubend.c
$(OUT)echo "#include <string.h>" >>__stubend.c
$(OUT)echo "#include \"constructor.h\"" >>__stubend.c
$(OUT)echo "#include \"command.h\"" >>__stubend.c
$(OUT)echo "FEATURE($(PROG)_bin)" >>__stubend.c
$(OUT)echo "int main();" >>__stubend.c
$(OUT)echo "void _exit(int s) __attribute__((noreturn));" >>__stubend.c
$(OUT)echo "void exit(int s) __attribute__((noreturn));" >>__stubend.c
$(OUT)echo "void exit(int s) { pthread_exit((void *)(intptr_t)s); };" >>__stubend.c
$(OUT)echo "static char __bss_end;" >>__stubend.c
$(OUT)echo "ELK_CONSTRUCTOR()" >>__stubend.c
$(OUT)echo "{" >>__stubend.c
$(OUT)echo "extern char __bss_start[];" >>__stubend.c
$(OUT)echo "memset(__bss_start, 0, &__bss_end - __bss_start);" >>__stubend.c
$(OUT)echo "command_insert_external(\"$(PROG)\", main);" >>__stubend.c
$(OUT)echo "}" >>__stubend.c
endef

__stubbegin.S: Makefile
	$(STUBBEGIN)

__stubend.c: Makefile
	$(STUBEND)

INCDIR = $(ELLCC)/libecc/src/$(LIB)

__stubbegin.o: __stubbegin.S
	$(OUTCC)$(CC) -target $(TUPLE) -c __stubbegin.S

__stubend.o: __stubend.c
	$(OUTCC)$(CC) -target $(TUPLE) -I$(INCDIR)/sys -I$(INCDIR)/include -c __stubend.c

reloc: $(OBJS) __stubbegin.o __stubend.o
	$(OUTCC)$(CC) -target $(LTUPLE) -o $(PROGNAME) -r __stubbegin.o $(OBJS) __stubend.o -nostdlib

strip: reloc
	$(OUT)$(OBJCOPY) -w -L* $(PROGNAME)
	$(OUT)$(OBJCOPY) -w --globalize-symbol=__elk_$(PROG)_bin $(PROGNAME)
	$(OUT)$(AR) cr ../../$(LIBNAME) $(PROGNAME)

install:

clean:
	$(OUT)rm -f *.o *.d *.gcda *.gcno __stubend.c

veryclean: clean
	$(OUT)rm -f $(PROGNAME)

-include $(DEPENDFILES) ""
