# Build rules for a library.
TUPLE = $(shell basename `pwd`)
ARCH = $(shell ../../getincarch $(TUPLE))
LIB = $(patsubst %-build,%,$(shell basename `cd ..; pwd`))
LIBNAME = lib$(LIB).a
SRCPATH := ../../src
VPATH :=
CC = ../../../bin/ecc
CXX = ../../../bin/ecc++
include $(SRCPATH)/$(LIB)/sources.mk
CFLAGS += -MD -MP
CXXFLAGS += -MD -MP
ifeq ($(VERBOSE),)
  OUT=@
  OUTC=@echo "Compiling $<";
  OUTA=@echo "Assembling $<";
  OUTAR=@echo "Making library $(LIBNAME)";
else
  OUT=
  OUTC=
  OUTA=
endif

.SUFFIXES: .c .cpp .cxx .S .o
.c.o:
	$(OUTC)$(CC) -target $(TUPLE) -c $(CFLAGS) $<
.cpp.o:
	$(OUTC)$(CXX) -target $(TUPLE) -c $(CXXFLAGS) $<
.cxx.o:
	$(OUTC)$(CXX) -target $(TUPLE) -c $(CXXFLAGS) $<
.S.o:
	$(OUTA)$(CC) -target $(TUPLE) -c $(CFLAGS) $<


# Build the library.

BASENAMES := $(basename $(filter %.c %.cxx %.cpp %.S, $(SRCS)))
OBJS := $(BASENAMES:%=%.o)

CRTBASENAMES := $(basename $(filter %.c %.S, $(CRTSRCS)))
CRTOBJS := $(CRTBASENAMES:%=%.o)

DEPENDSRCS := $(basename $(filter %.c %.cxx %.cpp %.S, $(SRCS) $(CRTSRCS)))
DEPENDFILES := $(DEPENDSRCS:%=%.d)

all: $(LIBNAME) $(CRTOBJS)

$(LIBNAME): $(OBJS)
	$(OUTAR)$(AR) cr $(LIBNAME) $(OBJS)

install: all
	$(OUT)echo Installing the $(LIB) library for $(TUPLE)
	$(OUT)mkdir -p $(LIBDIR)
	$(OUT)cp $(LIBNAME) $(CRTOBJS) $(LIBDIR)
	$(OUT)if [ -d $(SRCPATH)/$(LIB)/include/$(ARCH) ] ; then \
	  mkdir -p ../../include/$(LIB) ; \
	  cp -rp $(SRCPATH)/$(LIB)/include/* \
		 ../../include/$(LIB) ; \
	fi
	$(OUT)if [ -e $(SRCPATH)/$(LIB)/ldscripts/$(LIB).ld ] ; then \
	  mkdir -p $(LIBDIR)/../$(LIB) ; \
	  cp -rp $(SRCPATH)/$(LIB)/ldscripts/*.ld $(LIBDIR)/../$(LIB) ; \
	fi
	$(OUT)if [ -d $(SRCPATH)/$(LIB)/ldscripts/$(ARCH) ] ; then \
	  cp -rp $(SRCPATH)/$(LIB)/ldscripts/$(ARCH)/* $(LIBDIR) ; \
	fi

clean:
	$(OUT)rm -f *.o *.d *.gcda *.gcno

veryclean: clean
	$(OUT)rm -f $(LIBNAME)

-include $(DEPENDFILES) ""

